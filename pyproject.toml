[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "latam-hybrid"
version = "0.1.0"
description = "Hybrid Wind-Solar Energy Analysis Framework for Latam Projects"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Klaus", email = "klaus@example.com"}
]
keywords = ["wind-energy", "solar-energy", "hybrid-renewable", "pywake", "pvlib"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
]

dependencies = [
    "pandas>=2.2.0",
    "numpy>=1.26.0",
    "pvlib>=0.10.0",
    "geopandas>=0.14.0",
    "shapely>=2.0.0",
    "fiona>=1.9.0",
    "h5py>=3.10.0",
    "matplotlib>=3.8.0",
    "openpyxl>=3.1.0",
    "xarray>=2024.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "ipython>=8.18.0",
    "ipykernel>=6.27.0",
]
pywake = [
    # Note: py_wake must be installed separately via conda
    # This is a placeholder for documentation purposes
]
visualization = [
    "folium>=0.15.0",
    "plotly>=5.18.0",
    "seaborn>=0.13.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/latam-hybrid"
Documentation = "https://latam-hybrid.readthedocs.io"
Repository = "https://github.com/yourusername/latam-hybrid"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["latam_hybrid*"]
exclude = ["tests*", "docs*", "legacy*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.black]
line-length = 100
target-version = ['py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | legacy
)/
'''

[tool.ruff]
line-length = 100
target-version = "py310"
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "legacy",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true

[[tool.mypy.overrides]]
module = [
    "py_wake.*",
    "pvlib.*",
    "geopandas.*",
    "shapely.*",
    "fiona.*",
    "folium.*",
    "h5py.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["latam_hybrid"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
